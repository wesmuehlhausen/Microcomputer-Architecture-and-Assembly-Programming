


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ***************************************
    2 00000000         ; Author: Wesley Muehlhausen
    3 00000000         ; Lab 3: Subroutines and 
    4 00000000         ; Date Created: September 30 2020
    5 00000000         ; Last Modified: September 30 2020
    6 00000000         ; Description: Using subroutines, push/pop, loops, and i
                       f else statements 
    7 00000000         ;      in order to do bcd->binary, abs value, and parity
                       -adder
    8 00000000         ; Inputs: X, N 
    9 00000000         ; Outputs: R6, R8, R9, R10
   10 00000000         ;*******************************************************
                       ***************************************
   11 00000000                 AREA             MyData, DATA, READWRITE, ALIGN=
2
   12 00000000        5 
                       X       RN               R5
   13 00000000        7 
                       N       RN               R7
   14 00000000         
   15 00000000                 AREA             MyCode, CODE, READONLY, ALIGN=2
   16 00000000                 EXPORT           __main
   17 00000000         
   18 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;
   19 00000000         bcd_to_binary                        ;turns bcd number i
                                                            nto binary
   20 00000000 B40E            PUSH             {R1,R2,R3}  ;save origional val
                                                            ues
   21 00000002         
   22 00000002 F04F 0526       MOV              R5, #0x26   ;assign BCD value 2
                                                            6 to X
   23 00000006 4629            MOV              R1, R5      ;R1 <- X value
   24 00000008 460A            MOV              R2, R1      ;R2 <- X value
   25 0000000A F001 010F       AND              R1, #0x0000000F ;[R1: UNIT] 
   26 0000000E EA4F 1212       LSR              R2, #4      ;[R2: TENS] 
   27 00000012 4613            MOV              R3, R2      ;copy tens digit (R
                                                            2)
   28 00000014 EA4F 0242       LSL              R2, #1      ;R2 * 2
   29 00000018 EB02 02C3       ADD              R2, R3, LSL #3 ;R2 = [2(R2) + 8
                                                            (R2) = 10(R2)]
   30 0000001C 440A            ADD              R2, R1      ;R2 = Tens + Unit
   31 0000001E 4616            MOV              R6, R2      ;put value of R2 in
                                                            to R6 
   32 00000020         
   33 00000020 BC0E            POP              {R1,R2,R3}  ;restore
   34 00000022 4770            BX               LR
   35 00000024         
   36 00000024         
   37 00000024         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;; 
   38 00000024         absolute_value                       ;finds the absolute
                                                             value of a decimal
                                                             number
   39 00000024 B407            PUSH             {R0,R1,R2}  ;save origional val
                                                            ues
   40 00000026         
   41 00000026 4639            MOV              R1, R7      ;copy value of N in



ARM Macro Assembler    Page 2 


                                                            to R1  
   42 00000028 2900            CMP              R1, #0      ;if number >= 0, ke
                                                            ep value and put in
                                                             R8
   43 0000002A DB01            BLT              next1
   44 0000002C 4688            MOV              R8, R1
   45 0000002E E002            B                next2       ;skip to end if her
                                                            e
   46 00000030         next1
   47 00000030         ;if number < 0, do 2’s complement
   48 00000030 F1C1 0200       NEG              R2, R1      ;2’s complement of 
                                                            R1 and stores in R2
                                                            
   49 00000034 4690            MOV              R8, R2
   50 00000036         next2
   51 00000036 BC07            POP              {R0,R1,R2}  ;return origional v
                                                            alues
   52 00000038 4770            BX               LR
   53 0000003A         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
   54 0000003A         
   55 0000003A         parity_adder                         ;goes through numbe
                                                            rs 1-100, if odd: a
                                                            dd to R9, if even: 
                                                            add to R10
   56 0000003A         
   57 0000003A B450            PUSH             {R4, R6}    ;store values
   58 0000003C         
   59 0000003C F04F 0400       MOV              R4, #0
   60 00000040 2C64    loop    CMP              R4, #100    ;for loop 0 to 99
   61 00000042 D808            BHI              exit        ;exit
   62 00000044 4626            MOV              R6, R4      ;tmp variable for R
                                                            4
   63 00000046         
   64 00000046 0876            LSRS             R6, #1      ;Get carry bit
   65 00000048 D301            BCC              next3       ;IF the digit is 0 
                                                            (EVEN)
   66 0000004A 44A2            ADD              R10, R10, R4 ;add value to even
                                                             total
   67 0000004C E000            B                next4       ;ELSE the digit 
   68 0000004E         next3
   69 0000004E 44A1            ADD              R9, R9, R4  ;if it was odd, end
                                                             up here
   70 00000050         next4
   71 00000050         
   72 00000050 F104 0401       ADD              R4, R4, #1  ;incriment
   73 00000054 E7F4            B                loop
   74 00000056         exit
   75 00000056 BC50            POP              {R4, R6}    ;restore values
   76 00000058 4770            BX               LR
   77 0000005A         
   78 0000005A         
   79 0000005A         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;
   80 0000005A         __main
   81 0000005A F06F 070E       MOV              R7, #0xFFFFFFF1 ;set value to N
                                                            
   82 0000005E F7FF FFCF       BL               bcd_to_binary ;call functions
   83 00000062 F7FF FFDF       BL               absolute_value



ARM Macro Assembler    Page 3 


   84 00000066 F7FF FFE8       BL               parity_adder
   85 0000006A         
   86 0000006A         
   87 0000006A                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\objects\main.d -o.\objects\main.o -I.\RTE\_Target_1 -IC:\U
sers\wesmu\AppData\Local\Arm\Packs\ARM\CMSIS\5.7.0\CMSIS\Core\Include -IC:\User
s\wesmu\AppData\Local\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --pr
edefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 531" --predefine="_
RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --lis
t=.\listings\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyData 00000000

Symbol: MyData
   Definitions
      At line 11 in file main.s
   Uses
      None
Comment: MyData unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

MyCode 00000000

Symbol: MyCode
   Definitions
      At line 15 in file main.s
   Uses
      None
Comment: MyCode unused
__main 0000005A

Symbol: __main
   Definitions
      At line 80 in file main.s
   Uses
      At line 16 in file main.s
Comment: __main used once
absolute_value 00000024

Symbol: absolute_value
   Definitions
      At line 38 in file main.s
   Uses
      At line 83 in file main.s
Comment: absolute_value used once
bcd_to_binary 00000000

Symbol: bcd_to_binary
   Definitions
      At line 19 in file main.s
   Uses
      At line 82 in file main.s
Comment: bcd_to_binary used once
exit 00000056

Symbol: exit
   Definitions
      At line 74 in file main.s
   Uses
      At line 61 in file main.s
Comment: exit used once
loop 00000040

Symbol: loop
   Definitions
      At line 60 in file main.s
   Uses
      At line 73 in file main.s
Comment: loop used once
next1 00000030

Symbol: next1
   Definitions
      At line 46 in file main.s
   Uses
      At line 43 in file main.s
Comment: next1 used once
next2 00000036

Symbol: next2



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 50 in file main.s
   Uses
      At line 45 in file main.s
Comment: next2 used once
next3 0000004E

Symbol: next3
   Definitions
      At line 68 in file main.s
   Uses
      At line 65 in file main.s
Comment: next3 used once
next4 00000050

Symbol: next4
   Definitions
      At line 70 in file main.s
   Uses
      At line 67 in file main.s
Comment: next4 used once
parity_adder 0000003A

Symbol: parity_adder
   Definitions
      At line 55 in file main.s
   Uses
      At line 84 in file main.s
Comment: parity_adder used once
11 symbols
349 symbols in table
